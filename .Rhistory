M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(N  != M) {
N <- evolveStep(N, n_rows)
}
N
}
evolve(M, n_rows)
M <- sandPileInit(n_rows)
evolve(M, n_rows)
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(N != M) {
N <- evolveStep(N, n_rows)
}
N
}
M <- sandPileInit(n_rows)
evolve(M, n_rows)
M
M != M
M == M
(M == M) == 0
(M == M)
(M == M) == T
matequal(M, M)
(M == M) == F
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
N <- evolveStep(N, n_rows)
}
N
}
M <- sandPileInit(n_rows)
evolve(M, n_rows)
M
evolve(M+M, n_rows)
evolve(M+M, n_rows)
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
M <- N
N <- evolveStep(M, n_rows)
}
N
}
M <- sandPileInit(n_rows)
evolve(M+M, n_rows)
M
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
M <- N
N <- evolveStep(M, n_rows)
}
N
}
1:n_rows
grainSand <- function(n_rows) {
matrix(data = sapply(1:nrows^2, function(x) 0), nrow = n_rows,
ncol = n_rows )
}
grainSand(nrow)
grainSand(n_rows)
matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows )
grainSand(n_rows)
grainSand <- function(n_rows) {
matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows )
}
grainSand(n_rows)
floor(n_rows)
floor(n_rows/2)
grainSand <- function(n_rows) {
H <- matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows );
H[floor(n_rows/2), floor(n_rows/2)] <- 1;
H
}
grainSand(n_rows)
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
M <- N
N <- evolveStep(M, n_rows)
}
N
}
grainSand <- function(n_rows) {
H <- matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows );
H[floor(n_rows/2), floor(n_rows/2)] <- 1;
H
}
H <- grainSand(n_rows)
M <- sandPileInit(n_rows)
evolve(M, n_rows)
evolve(M+H, n_rows)
evolve(M+H+H, n_rows)
evolve(M+H+H+H, n_rows)
evolve(M+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H+H+H+H+H, n_rows)
evolve(M+H+H+H+H+H+H+H+H+H+H, n_rows)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows)
}
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
M <- N
N <- evolveStep(M, n_rows)
}
N
}
grainSand <- function(n_rows) {
H <- matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows );
H[floor(n_rows/2), floor(n_rows/2)] <- 1;
H
}
H <- grainSand(n_rows)
M <- sandPileInit(n_rows)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows)
print(M)
}
require(lattice)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows)
levelplot(M)
}
levelplot(M)
Sys.sleep(1)
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
M <- N
N <- evolveStep(M, n_rows)
}
N
}
grainSand <- function(n_rows) {
H <- matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows );
H[floor(n_rows/2), floor(n_rows/2)] <- 1;
H
}
H <- grainSand(n_rows)
M <- sandPileInit(n_rows)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
Sys.sleep(1);
levelplot(M)
}
levelplot(H)
levelplot(H)
levelplot(M+H)
levelplot(M)
levelplot(H)
levelplot(M)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
Sys.sleep(1);
levelplot(M)
}
levelplot(M);
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
Sys.sleep(1);
levelplot(M);
}
Sys.sleep(1)
Sys.sleep(4)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
Sys.sleep(4);
levelplot(M);
}
S = c(M)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
S <- append(S, levelplot(M))
}
S
S[1]
S = c(M)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
S <- append(S, c(levelplot(M)))
}
S
S[1]
rm(list = ls())
n_rows <- 10
sandPileInit <- function(n_rows) {
matrix(data = rcat(n_rows^2, p=c(1/4, 1/4, 1/4, 1/4)) - 1, nrow = n_rows,
ncol = n_rows )
}
topple <- function(M, n_rows, i, j) {
M[i,j] <- M[i,j] - 4
if (i > 1) {
M[i-1,j] <- M[i-1,j] + 1
}
if (i < n_rows) {
M[i+1,j] <- M[i+1,j] + 1
}
if (j > 1) {
M[i,j-1] <- M[i,j-1] + 1
}
if (j < n_rows) {
M[i,j+1] <- M[i,j+1] + 1
}
M
}
findExcess <- function(M) {
data.frame( which(M>3, arr.ind = T) )
}
evolveStep <- function(M, n_rows) {
L <- findExcess(M)
L_length <-length( L[,1] )
if (L_length > 0) {
for (k in 1:L_length) {
i <- L[k,1]
j <- L[k,2]
M <- topple(M, n_rows, i, j)
}
}
M
}
evolve <- function(M, n_rows) {
N <- evolveStep(M, n_rows)
while(max(N - M) > 0.01) {
M <- N
N <- evolveStep(M, n_rows)
}
N
}
grainSand <- function(n_rows) {
H <- matrix(data = sapply(1:n_rows^2, function(x) 0), nrow = n_rows,
ncol = n_rows );
H[floor(n_rows/2), floor(n_rows/2)] <- 1;
H
}
H <- grainSand(n_rows)
M <- sandPileInit(n_rows)
for (k in 1:50) {
M <- M + H;
M <- evolve(M, n_rows);
levelplot(M)
}
levelplot(M);
levelplot(M);
svg("my_plot.svg");
dev.off()
levelplot(M);
